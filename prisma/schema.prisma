// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   output   = "../lib/generated/prisma"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  hashedPassword    String?
  role              UserRole           @default(USER)
  accounts          Account[]
  sessions          Session[]
  additionalDetails AdditionalDetails?
  leetcodeProfile   LeetcodeProfile?
}

enum UserRole {
  ADMIN
  USER
  MODERATOR
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AdditionalDetails {
  id       String   @id @default(uuid())
  linkedin String
  github   String
  twitter  String
  college  String
  location String
  skills   String[]
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String   @unique
}

model LeetcodeProfile {
  id              String @id @default(uuid())
  totalSolvedQs   Int
  totalLeetcodeQs Int
  easyQsSolved    Int
  totalEasyQs     Int
  mediumQs        Int
  totalMediumQs   Int
  hardQs          Int
  totalHardQs     Int
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String @unique
}

model Contest {
  id        String   @id @default(uuid())
  title     String
  platform  String
  startTime String
  endTime   String
  date      DateTime
  link      String
  createdAt DateTime @default(now())

  @@index([date])
}

model Course {
  id          String     @id @default(uuid())
  title       String
  creator     String
  platform     String
  duration    Int?
  url         String
  thumbnail   String
  type        CourseType
  isFree      Boolean    @default(true)
  price       Float?
  createdAt   DateTime   @default(now())
  tags        Tag[]      
  categories  Category[] 
}

model DsaSheet {
  id          String     @id @default(uuid())
  title       String
  description String
  creator     String
  url         String
  totalQs     Int
  createdAt   DateTime   @default(now())
  tags        Tag[]     
  categories  Category[] 
}

model Tag {
  id          String      @id @default(uuid())
  name        String      @unique
  courses     Course[]    
  dsaSheets   DsaSheet[]  
}

model Category {
  id          String      @id @default(uuid())
  name        String      @unique
  courses     Course[]   
  dsaSheets   DsaSheet[]  
}

enum CourseType {
  PAID
  FREE
}

